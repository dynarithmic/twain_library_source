DTWAIN Version changes

5.3.0.2		  

- Internal TWAIN message loop has now been restructured to start before the source UI is displayed.

- For 64-bit drivers -- General fixes for various functions that query the state of the TWAIN device
  (for example DTWAIN_IsFeederLoaded(), DTWAIN_IsDeviceOnLine()).

- Change to DTWAIN_SetDefaultSource() to use the setting in DTWAIN32.INI and DTWAIN64.INI files.
  This change was necessary since the current operation of DTWAIN_SetDefaultSource() is no longer supported by the 
  TWAIN specfication 2.x.  Thus the default source product name is now kept in the DTWAIN32.INI and DTWAIN64.INI 
  files under the [Sources] section.


5.3.0.1		  

- Fix issue with buffered mode file transfers.


5.3.0.0		  

- Initial support for latest TWAIN 2.5 capabilities (mostly Image Addressing).

- Support for Memory File Transfers (see the new DTWAIN_USEMEMFILE file flag for DTWAIN_AcquireFile).

- Internal changes to DTWAIN Array handling.

- Building the DTWAIN source code now requires Visual Studio 2019 and above.

- Updated LibPng to version 1.6.38

- Updated LibTiff to version 4.4

- Added demo projects.

- Initial release of the C++ object-oriented wrapper of DTWAIN.

- Miscellaneous bug fixes.
						

5.2.0.10		  

- Fixed issue when acquiring a file using memory/buffered transfer, where an invalid bitmap was sent to the
  application to query if the bitmap should be discarded.


5.2.0.9		  

- Added DTWAIN_SysInitializeNoBlocking() --

  This new function works identical to DTWAIN_SysIntialize, except that DTWAIN_SysInitializeNoBlocking 
  will not display the "DTWAIN Resource Error" message box if the DTWAIN resource text files cannot be found.  
  This will allow DTWAIN to not block the application if there is a resource error.

- Updated blank page handling.

  Prior versions of the blank page handling always tested for a blank page for the image that is directly coming
  from the TWAIN device, and a second time a test for blank page after the image has been cropped and resampled.  
  This version now gives the ability to test for a blank page in either or both scenarios.  

  The new DTWAIN_SetBlankPageDetectionEx sets up testing for blank pages using the method outlined above.

      DTWAIN_SetBlankPageDetectionEx(DTWAIN_SOURCE Source, DTWAIN_FLOAT threshold, LONG autodetect, LONG detectOpts, DTWAIN_BOOL bSet)

  Note that this function works similar to the DTWAIN_SetBlankPageDetection function, except for the new detectOpts parameter.
  The detectOpts parameter is a combination of the following:

  DTWAIN_BP_DETECTORIGINAL - Detect blank pages for the original image that the device generated.
  DTWAIN_BP_DETECTADJUSTED - Detect blank pages for the adjusted image (after cropping, rescaling etc.)
  DTWAIN_BP_DETECTALL	   - Detect blank pages for both the original and adjusted images (this is the legacy behavior).

- Corrected blank page handling for gray-scale images

  If blank page handling is turned on, and the image acquired is an 8-bit that requires a palette to define the colors used,
  the blank page detection will detect pages that have a single solid color within the threshold given by the caller.  

  For example, if the threshold limit is 98%, and 98% or above of the entire page is red, the page is now considered blank.  

- Added missing ANSI and Wide functions for DTWAIN_Range... and DTWAIN_Frame... functions that have 
  pointers to strings as parameters.

- Added function DTWAIN_GetActiveDSMPath, DTWAIN_GetActiveDSMPathA, and DTWAIN_GetActiveDSMPathW to return the 
  full path of the TWAIN DSM that is being used.

- Added function DTWAIN_GetTwainStringName, DTWAIN_GetTwainStringNameA, and DTWAIN_GetTwainStringNameW
  to return a string version of one of the triplet components.  This function is merely a utility function that allows 
  you to get the string versions of the values used in the DG/DAT/MSG triplet combination.

      For example: 
          char buffer[100];    
          DTWAIN_GetStringNameA(DTWAIN_DATNAME, 0x0009, buffer, 100);

      will have buffer set to "DAT_USERINTERFACE", since 9 is the TWAIN Data Argument Type (DAT) for the DG_CONTROL name 
      associated with value 9 (see the twain.h header file provided in the include path for DAT names and their 
      corresponding values).

      The first parameter can be one of the values below:
      DTWAIN_DGNAME - The data group name as a string
      DTWAIN_DATNAME - The data argument type as a string
      DTWAIN_MSGNAME - The message name (for example, "MSG_GET")
     

- Formerly undocumented DTWAIN_AddPDFTextEx is now available.  The function adds text to a PDF page 
  given a DTWAIN_PDFTEXTELEMENT.

- DTWAIN_SysIntialize and DTWAIN_SysInitializeNoBlocking() will now set DTWAIN_GetLastError() to -1051
  if the DTWAIN resource text files cannot be found.  If DTWAIN_SysInitialize or DTWAIN_SysInitializeNoBlocking 
  return 0, your application should immediately call DTWAIN_GetLastError() to confirm that the error received 
  is -1051, indicating that the resources could not be found.

- Fix and update the C#, Visual Basic Net, and the C/C++ LoadLibrary/GetProcAddress wrappers (using the 
  LoadLibrary and GetProcAddress wrappers, no import library is required by C and C++ applications 
  that wish to use the DTWAIN library)


5.2.0.8
- Corrected issue with single page PCX files not being generated.
- Corrected issue with acquiring to text files with no available OCR support library.


5.2.0.7
- Corrected issue with duplex scanning only scanning the first page if pending image count was not 0.


5.2.0.6		  
- Added following function:
  DTWAIN_ConvertDIBToBitmap -- Converts a Device Independent Bitmap to a Device Dependent Bitmap

- The functions were missing from the .DEF files:
  DTWAIN_ArrayGetSourceAt
  DTWAIN_GetTwainAppIDEx
  DTWAIN_GetSourceIDEx

- The dtwainx.h header file now includes <commdlg.h> and replaces LPCBYTE with const BYTE*.
  The reason for this is that if WIN32_LEAN_AND_MEAN are defined by the application, and 
  dtwain.h is #included after this definition, the OPENFILENAME and LPCBYTE were not defined.

- Miscellaneous code refactoring.


5.2.0.5		  
- Added following functions:
  DTWAIN_ArrayGetSourceAt -- Use this function in conjunction with DTWAIN_EnumSources to easily retrieve each TWAIN Source found.
  DTWAIN_GetTwainAppIDEx --  Use this function to fill in a TW_IDENTITY structure that describes the TWAIN application ID values.
  DTWAIN_GetSourceIDEx   --  Use this function to fill in a TW_IDENTITY structure that describes a TWAIN Source.

  The following set of functions handling the CAP_AUTOMATICSENSEMEDIUM capability are added:

  DTWAIN_IsAutomaticSenseMediumEnabled
  DTWAIN_IsAutomaticSenseMediumSupported
  DTWAIN_EnableAutomaticSenseMedium
 

5.2.0.4		  
- Changed DTWAIN ANSI and wide string functions to use the "length" parameters correctly.

- Updated dtwainx.h and dtwstrnfn.h to add missing exported API function declarations.

- Updated the C++ interface found in the \language_bindings_and_examples\C_CPP_DynamicLoad\ directory.

- Updated copyright message to stated year 2021.


5.2.0.3		  
- Added functions DTWAIN_SelectSource2Ex to allow customization of the files listed in the TWAIN Select Source dialog box.
  Customization includes including and excluding TWAIN source names in the dialog box, as well as aliasing your own names for
  a device name.  This function can be used to only display devices that are pertinent for your application.

  Example:
    DTWAIN_SOURCE source = DTWAIN_SelectSource2Ex(NULL, "Custom Title", 0,0, NULL, "Scanner1|Scanner2", "Scanner3=My Scanner",
                                                  DTWAIN_DLG_CENTER | DTWAIN_DLG_USEEXCLUDENAME | DTWAIN_DLG_USENAMEMAPPING);

  The code above will display the TWAIN Select Source dialog, centered on the screen.  If any devices have the product name 
  "Scanner1" or "Scanner2", they  will be removed from the dialog.  In addition the device named "Scanner3" will be named "My Scanner" 
  in the dialog box.  

  Note that you could have done this in a much longer way by calling DTWAIN_EnumSources, gathering all the product names, and 
  displaying the products you want as selections by creating your own dialog or user-interface.  The DTWAIN_SelectSource2Ex is
  just a much simpler way of achieving this goal.

  In addition, there are functions DTWAIN_SelectSource2ExA and DTWAIN_SelectSource2ExW that represent the ANSI and Wide versions
  of the function. 


5.2.0.2		  
- Fixed DLL Version Information in the DLL resources.

- Fixed generation of multipage TIFF files if the compression used on pages will vary.  This fix required 
  patching the FreeImage source code. 

- Fixed DTWAIN_SetTiffCompressType to properly handle non-multipage and multipage TIFF types.

- Added function DTWAIN_SetDSMSearchOrderEx to allow applications to customize where DTWAIN will search for the 
  TWAIN Data Source Manager.  This differs from DTWAIN_SetDSMSearchOrder in that the Ex version will now allow
  searching in a custom directory.		  

- Added initial support for MSG_GETHELP, MSG_GETLABEL, and MSG_GETLABELENUM using DTWAIN_GetCapValues and related functions.
  Note that these messages were always available using the lower-level DTWAIN_CallDSM function, but now the library has made
  these messages available using the DTWAIN_GetCapValues function.

- Changed DTWAIN_IsFeederSupported to do a more thorough test to see if a feeder is supported instead of just checking
  for the feeder being enabled.

- Fixed issue with MSG_SETCONSTRAINT message not being recognized in call to DTWAIN_SetCapValues.

- Added DTWAIN_GetLastError() return code of -1050 to denote that Source selection has been cancelled from the TWAIN dialog.  
  Previously the cancellation was reported as an INVALID DTWAIN SOURCE.  This did not affect applications, since the 
  TWAIN Source is actually NULL if the TWAIN dialog is cancelled, but this additional code is added for clarity.

- DTWAIN Log now shows local time stamp intstead of UTC.
					   
- Other miscellaneous fixes


5.2.0.1
- Fix incorrect version number in DLL resources

- Add missing source file ctlacquireaudio.cpp to source build project


5.2.0.0
- Added support for audio file transfers using the TWAIN capability ACAP_AUDIOXFER.  
  New functions are DTWAIN_AcquireAudioNative, DTWAIN_AcquireAudioFile, DTWAIN_AcquireAudioFileA, DTWAIN_AcquireAudioFileW

- Fixed issue with multipage image files only saving the last page.


5.1.0.9
- Added DTWAIN_SetTwainDialogFont() to adjust font used in TWAIN Select Source dialog (only is available
  when calling DTWAIN_SelectSource2() function)  Usage:

	DTWAIN_SetTwainDialogFont(HFONT font)

  where HFONT is a handle to a Windows HFONT.  If font is 0, the default font (MS Sans Serif) is used.

- Added test for CAP_SHEETCOUNT to control the number of pages that will be acquired.

5.1.0.8
- Removed initial slow TWAIN capability retrieval and replaced with fast capability retrieval.
- Fixed issue with CAP_FEEDERLOADED being considered an unsupported capability for some TWAIN devices.
- Added additional language resource for Portuguese-Brazilian strings (thanks to user mauriciofaria).
- Visual Studio 2019 solution added (thanks to user Dcreeron).

5.1.0.7
- Fixed issue with program opting to discard the first page of a multi-page acquisition.

5.1.0.6
- Added custom code for TWAIN drivers that erroneously return TWRC_CANCEL when the user interface is closed.
- Updated search logic when attempting to find / load the TWAIN Data Source manager
- Added DTWAIN_GetLibraryPath function to return the path of the loaded DTWAIN Dll

5.1.0.5
- Minor source code changes.  Removed LPGL wording from source files.

5.1.0.4
- Fix for erroneous return code when multipage PCX (DCX) files after saved

5.1.0.3
- Add DTWAIN_...Ex() functions that return a DTWAIN_ARRAY.  These functions are simpler versions of the DTWAIN 
  functions that accept LPDTWAIN_ARRAY as a parameter.  This makes it simpler for languages such as Python and
  others that have issues with pointer arguments.  Thus instead of having to do something like this:

      DTWAIN_SOURCE Source;
      DTWAIN_ARRAY Array;
      //...
      DTWAIN_EnumOrientations(Source, &Array)...

The call can now be this:

      DTWAIN_SOURCE Source;
      //...
      DTWAIN_ARRAY array = DTWAIN_EnumOrientationsEx(Source);

Since DTWAIN_ARRAY is actually an integer (32-bit or 64-bit, depending on the program's bit-ness), the calling 
application can simply treat the DTWAIN_ARRAY as an integer type.

For functions that already have an Ex() at the end of the function name, an Ex2() version was created, for example,
     DTWAIN_EnumSupportedCapsEx2()
     
     
5.1.0.1
- Add all supported PDF page dimensions to twaininfo.txt.  This allows customization of the PDF creation with
  respect to the page sizing (you can add your own definitions).
- Update sources to output Visual C++ 2019 compilation messages.

5.1.0.0
- Update LibTiff to version 4.0.10
- Update LibPNG to version 1.6.37
- Now requires application to call DTWAIN_UseMultipleThreads if one DTWAIN session will be used across multiple threads.
- Speed up processing DTWAIN functions when using DTWAIN in a single thread.
